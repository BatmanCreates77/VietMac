import { NextResponse } from "next/server";
import * as cheerio from "cheerio";

// Model definitions for tracking
const MODELS_TO_TRACK = {
  m4: {
    base: {
      id: "m4-base-16-512gb",
      configuration: "M4, 10-core CPU, 10-core GPU, 16GB, 512GB",
      category: "M4",
    },
    top: {
      id: "m4-top-16-1tb",
      configuration: "M4, 10-core CPU, 10-core GPU, 24GB, 1TB",
      category: "M4",
    },
  },
  m4Pro: {
    base: {
      id: "m4pro-base-24-512gb",
      configuration: "M4 Pro, 14-core CPU, 20-core GPU, 24GB, 512GB",
      category: "M4 Pro",
    },
    top: {
      id: "m4pro-top-48-1tb",
      configuration: "M4 Pro, 14-core CPU, 20-core GPU, 48GB, 1TB",
      category: "M4 Pro",
    },
  },
  m4Max: {
    base: {
      id: "m4max-base-36-1tb",
      configuration: "M4 Max, 14-core CPU, 32-core GPU, 36GB, 1TB",
      category: "M4 Max",
    },
    top: {
      id: "m4max-top-128-2tb",
      configuration: "M4 Max, 16-core CPU, 40-core GPU, 128GB, 2TB",
      category: "M4 Max",
    },
  },
  m3Max: {
    base: {
      id: "m3max-base-36-1tb",
      configuration: "M3 Max, 14-core CPU, 30-core GPU, 36GB, 1TB",
      category: "M3 Max",
    },
    top: {
      id: "m3max-top-128-2tb",
      configuration: "M3 Max, 16-core CPU, 40-core GPU, 128GB, 2TB",
      category: "M3 Max",
    },
  },
};

// Scrape FPT Shop prices
async function scrapeFPTShopPrices() {
  const products = [
    // M4 Base & Top
    {
      url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m4-16gb-512gb",
      ...MODELS_TO_TRACK.m4.base,
    },
    {
      url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m4-24gb-1tb",
      ...MODELS_TO_TRACK.m4.top,
    },
    // M4 Pro Base & Top
    {
      url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-m4-pro-16-2024-14cpu-20gpu-24gb-512gb",
      ...MODELS_TO_TRACK.m4Pro.base,
    },
    {
url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m4-pro-48gb-1tb",
      ...MODELS_TO_TRACK.m4Pro.top,
    },
    // M4 Max Base & Top
    {
      url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m4-max-36gb-1tb",
      ...MODELS_TO_TRACK.m4Max.base,
      id: "m4-pro-24-1tb",
      configuration: "M4 Pro, 24GB RAM, 1TB SSD",
    },
    {
url"https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro--128gb2tb
      ...MODELS_TO_TRACK.m4Max.top,
    },
    // M3 Max Base & Top
    {      url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m3-max-36gb-1tb",
      ...MODELS_TO_TRACK.m3Max.base,
      id: "m4-max-48-1tb",
      configuration: "M4 Max, 48GB RAM, 1TB SSD",
    },
    {
url: "https://fptshop.com.vn/may-tinh-xach-tay/macbook-pro-16-m3-max-128gb-2tb",
      ...MODELS_TO_TRACK.m3Max.top,

  const results = [];

  for (const product of products) {
    try {
      const response = await fetch(product.url, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        },
      });

      if (response.ok) {
        const html = await response.text();
        const $ = cheerio.load(html);

        let price = null;
        const priceText =
          $(".st-product-price .price").text() ||
          $('[class*="price"]').first().text() ||
          $('[data-price]').attr("data-price") ||
          "";

        const priceMatch = priceText.match(/[\d.,]+/);
        if (priceMatch) {
          price = parseInt(priceMatch[0].replace(/[.,]/g, ""));
        }

        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: price || 0,
          available: price > 0,
          id: product.id,
          url: product.url,
        });

        console.log(`✅ FPT Shop scraped: ${product.id} - ${price || "N/A"}`);
      } else {
        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: 0,
          available: false,
          id: product.id,
          url: product.url,
        });
      }
    } catch (error) {
      console.log(`❌ FPT Shop error: ${product.id}`, error.message);
      results.push({
        model: 'MacBook Pro 16"',
        configuration: product.configuration,
        category: product.category,
        vndPrice: 0,
        available: false,
        id: product.id,
        url: product.url,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  return results;
Scrape pricesasync scrapeShopDunkPricesconst products =
    // M4 Base & Top      url: "https://shopdunk.com/macbook-pro-16-inch-m4-16gb-512gb",
      ...MODELS_TO_TRACK.m4.base,
    },
    {
      url: "https://shopdunk.com/macbook-pro-16-inch-m4-24gb-1tb",
      ...MODELS_TO_TRACK.m4.top,
    },
    // M4 Pro Base & Top
    {
      ...MODELS_TO_TRACK.m4Pro.base,
url"https://shopdunk.com/macbook-pro--inch-pro48gb
      ...MODELS_TO_TRACK.m4Pro.top,
    },
    // M4 Max Base & Top
    {,
      ...MODELS_TO_TRACK.m4Max.base128gb-2tb",
      ...MODELS_TO_TRACK.m4Max.top,
    },
    // M3 Max Base & Top
    {
      url: "https://shopdunk.com/macbook-pro-16-inch-m3-max-36gb,
      ...MODELS_TO_TRACK.m3Max.basem3128gb,
      ...MODELS_TO_TRACK.m3Max.top
  const results = [];

  for (const product of products) {
    try {
      const response = await fetch(product.url, {
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
        },
      });

      if (response.ok) {
        const html = await response.text();
        const $ = cheerio.load(html);

        let price = null;
        const priceText =
          $(".special-price .price").text() ||
          $('[class*="product-price"]').first().text() ||
          "";

        const priceMatch = priceText.match(/[\d.,]+/);
        if (priceMatch) {
          price = parseInt(priceMatch[0].replace(/[.,]/g, ""));
        }

        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: price || 0,
          available: price > 0,
          id: product.id,
          url: product.url,
        });

        console.log(
          `✅ ShopDunk scraped: ${product.id} - ${price || "N/A"}`,
        );
      } else {
        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: 0,
          available: false,
          id: product.id,
          url: product.url,
        });
      }
    } catch (error) {
      console.log(`❌ ShopDunk error: ${product.id}`, error.message);
      results.push({
        model: 'MacBook Pro 16"',
        configuration: product.configuration,
        category: product.category,
        vndPrice: 0,
        available: false,
        id: product.id,
        url: product.url,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  return results;
Scrape pricesasync scrapeTopZonePricesconst products =urlhttps//www.topzone.vn/macbook16-m4-16gb
      ...MODELS_TO_TRACK.m4.base,
    },
    {
      url: "https://www.topzone.vn/macbook-pro-16-m4-24gb-1tb",
      ...MODELS_TO_TRACK.m4.top,
    },
    {      ...MODELS_TO_TRACK.m4Pro.base,
48gb,
      ...MODELS_TO_TRACK.m4Pro.top36gb,
      ...MODELS_TO_TRACK.m4Max.base      url: "https://www.topzone.vn/macbook-pro-16-m4-max-128gb-2tb",
      ...MODELS_TO_TRACK.m4Max.top,
    },
    {
      url: "https://www.topzone.vn/macbook-pro-16-m3-max-36gb-1tb",
      ...MODELS_TO_TRACK.m3Max.base,
    },
    {
      url: "https://www.topzone.vn/macbook-pro-16-m3-max-128gb-2tb",
      ...MODELS_TO_TRACK.m3Max.top,
    },
  ];

  const results = [];

  for (const product of products) {
    try {
      const response = await fetch(product.url, {
        headers: {
          "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X)",
        },
      });

      if (response.ok) {
        const html = await response.text();
        const $ = cheerio.load(html);

        let price = null;
        const priceText = $(".product-price").text() || "";

        const priceMatch = priceText.match(/[\d.,]+/);
        if (priceMatch) {
          price = parseInt(priceMatch[0].replace(/[.,]/g, ""));
        }

        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: price || 0,
          available: price > 0,
          id: product.id,
          url: product.url,
        });

        console.log(`✅ TopZone scraped: ${product.id} - ${price || "N/A"}`);
      } else {
        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: 0,
          available: false,
          id: product.id,
          url: product.url,
        });
      }
    } catch (error) {
      console.log(`❌ TopZone error: ${product.id}`, error.message);
      results.push({
        model: 'MacBook Pro 16"',
        configuration: product.configuration,
        category: product.category,
        vndPrice: 0,
        available: false,
        id: product.id,
        url: product.url,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  return results;
}

// Scrape  ShopDunkprices
async pricesasync function scrapeShopDunkPricesscrapeCellphonesPrices() {
  const products =const products = [
    {
url: "https://shopdunk.com/macbook-pro-16-inch-m4-pro-24gb-512gb",
      id: "m4-pro-24-512gb",
      configuration: "M4 Pro, 24GB RAM, 512GB SSD",
      ...MODELS_TO_TRACK.m4.base,
    },
    {
      url: "https://shopdunk.com/macbook-pro-16-inch-m4-max2024-36gb-ram-32-core-gpu-1tb-ssd",
      id: "m4-max-36-1tb",
      configuration: "M4 Max, 36GB RAM, 1TB SSD",
      ...MODELS_TO_TRACK.m4.top,
    },
    {
      urlconfiguration: "M4 Max, 48GB RAM, 1TB SSDpro24gb512gb",
      ...MODELS_TO_TRACK.m4Pro.base,
    },
    {
      url: "https://cellphones.com.vn/macbook-pro-16-inch-m4-pro-48gb-1tb.html",
      ...MODELS_TO_TRACK.m4Pro.top,
    },
    {
      url: "https://cellphones.com.vn/macbook-pro-16-inch-m4-max-36gb-1tb.html",
      ...MODELS_TO_TRACK.m4Max.base,
    },
    {
      url: "https://cellphones.com.vn/macbook-pro-16-inch-m4-max-128gb-2tb.html",
      ...MODELS_TO_TRACK.m4Max.top,
    },
    {
      url: "https://cellphones.com.vn/macbook-pro-16-inch-m3-max-36gb-1tb.html",
      ...MODELS_TO_TRACK.m3Max.base,
    },
    {
      url: "https://cellphones.com.vn/macbook-pro-16-inch-m3-max-128gb-2tb.html",
      ...MODELS_TO_TRACK.m3Max.top,
    },
  ];

  const results = [];

  for (const product of products) {
    try {
      const response = await fetch(product.url, {
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        },
      });

      if (response.ok) {
        const html = await response.text();
        const $ = cheerio.load(html);

        let price = null;
        const priceText = $(".box-price-present").text() || "";

        const priceMatch = priceText.match(/[\d.,]+/);
        if (priceMatch) {
          price = parseInt(priceMatch[0].replace(/[.,]/g, ""));
        }

        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: price || 0,
          available: price > 0,
          id: product.id,
          url: product.url,
        });

        console.log(
          `✅ CellphoneS scraped: ${product.id} - ${price || "N/A"}`,
        );
      } else {
        results.push({
          model: 'MacBook Pro 16"',
          configuration: product.configuration,
          category: product.category,
          vndPrice: 0,
          available: false,
          id: product.id,
          url: product.url,
        });
      }
    } catch (error) {
      console.log(`❌ CellphoneS error: ${product.id}`, error.message);
      results.push({
        model: 'MacBook Pro 16"',
        configuration: product.configuration,
        category: product.category,
        vndPrice: 0,
        available: false,
        id: product.id,
        url: product.url,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 500));
  }

  return results;
}

// Fallback prices (realistic based on Vietnamese market - Oct 2025)
function getFallbackPrices(marketplace) {
  const basePrices = {
    m4: { base: 42990000, top: 51990000 },
    m4Pro: { base: 64990000, top: 79990000 },
    m4Max: { base: 89990000, top: 164990000 },
    m3Max: { base: 79990000, top: 149990000 },
  };

  const allProducts = [];

  Object.keys(MODELS_TO_TRACK).forEach((chipType) => {
    ["base", "top"].forEach((variant) => {
      const model = MODELS_TO_TRACK[chipType][variant];
      allProducts.push({
        model: 'MacBook Pro 16"',
        configuration: model.configuration,
        category: model.category,
        vndPrice: basePrices[chipType][variant],
        available: true,
        id: model.id,
        url: `https://${marketplace}.com/macbook-pro-16-${model.id}`,
      });
    });
  });

  return allProducts;
}

async function getExchangeRateFromWise() {
  try {
    const response = await fetch(
      "https://wise.com/in/currency-converter/inr-to-vnd-rate",
      {
        headers: {
          "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        },
      },
    );

    if (response.ok) {
      const html = await response.text();
      const rateMatch = html.match(/₹1\s*INR\s*=\s*([\d.,]+)\s*VND/i);
      if (rateMatch && rateMatch[1]) {
        const rate = parseFloat(rateMatch[1].replace(/,/g, ""));
        if (rate > 250 && rate < 350) {
          console.log("✅ Wise rate:", rate);
          return rate;
        }
      }
    }
  } catch (error) {
    console.log("❌ Wise error:", error.message);
  }
  return null;
}

async function getExchangeRate() {
  try {
    const wiseRate = await getExchangeRateFromWise();
    if (wiseRate) return wiseRate;

    const response = await fetch(
      "https://api.exchangerate-api.com/v4/latest/INR",
    );
    const data = await response.json();
    if (data.rates.VND) {
      console.log("✅ ExchangeRate-API:", data.rates.VND);
      return data.rates.VND;
    }
  } catch (error) {
    console.error("Exchange rate error:", error);
  }
  return 298;
}

function calculatePrices(priceData, exchangeRate) {
  return priceData.map((item) => {
    if (!item.vndPrice) {
      return {
        ...item,
        inrPrice: null,
        vatRefund: null,
        finalPrice: null,
      };
    }

    const inrPrice = item.vndPrice / exchangeRate;
    const vatRefund = inrPrice * 0.085;
    const finalPrice = inrPrice - vatRefund;

    return {
      ...item,
      inrPrice: Math.round(inrPrice),
      vatRefund: Math.round(vatRefund),
      finalPrice: Math.round(finalPrice),
    };
  });
}

export async function GET(request) {
  try {
    const { pathname } = new URL(request.url);

    if (pathname.includes("/api/macbook-prices")) {
      console.log("🔄 Fetching livelive prices...");
      const exchangeRate = await getExchangeRate();

      // Scrape all marketplaces in parallel for faster response
      console.log("🕷️ Scraping all marketplaces...");
      const [fptPrices, shopDunkPrices, topZonePrices, cellphonesPrices] =
        await Promise.all([
          scrapeFPTShopPrices(),
          scrapeShopDunkPrices(),
          scrapeTopZonePrices(),
          scrapeCellphonesPrices(),
        ]);
[,,,]
        awaitPromise.all[
          scrapeFPTShopPrices(),
          scrapeShopDunkPrices(),
          scrapeTopZonePrices(),
          scrapeCellphonesPrices(),
        ]
      // Use fallback if scraping completely failed
      const finalFPTPrices = fptPrices.some((p) => p.vndPrice > 0)
        ? fptPrices
        : getFallbackPrices("fptShop");
      const finalShopDunkPrices = shopDunkPrices.some((p) => p.vndPrice > 0)
        ? shopDunkPrices
        : getFallbackPrices("shopDunk");
      const finalTopZonePrices = topZonePrices.some((p) => p.vndPrice > 0)
        ? topZonePrices
        : getFallbackPrices("topZone");
      const finalCellphonesPrices = cellphonesPrices.some((p) => p.vndPrice > 0)
        ? cellphonesPrices
        : getFallbackPrices("cellphones");

      // Calculate INR prices with VAT refund
      const fptWithINR = calculatePrices(finalFPTPrices, exchangeRate);
      const shopDunkWithINR = calculatePrices(
        finalShopDunkPrices,
        exchangeRate,
      );
      const topZoneWithINR = calculatePrices(finalTopZonePrices, exchangeRate);
      const cellphonesWithINR = calculatePrices(
        finalCellphonesPrices,
      const finalFPTPrices =
        fptPrices.some((p) => p.vndPrice > 0)
          ? fptPrices
          : getFallbackPrices("fptshop");
      const finalShopDunkPrices =
        shopDunkPrices.some((p) => p.vndPrice > 0)
          ? shopDunkPrices
          : getFallbackPrices("shopdunk");
      const finalTopZonePrices =
        topZonePrices.some((p) => p.vndPrice > 0)
          ? topZonePrices
          : getFallbackPrices("topzone");
      const finalCellphonesPrices =
        cellphonesPrices.some((p) => p.vndPrice > 0)
          ? cellphonesPrices
          : getFallbackPrices("cellphones");

      const fptWithINR = calculatePrices(finalFPTPrices, exchangeRate);
      const shopDunkWithINR = calculatePrices(
        finalShopDunkPrices,
        exchangeRate,
      );
      const topZoneWithINR = calculatePrices(finalTopZonePrices, exchangeRate);
      const cellphonesWithINR = calculatePrices(
        finalCellphonesPrices,
        exchangeRate,
      );

      return NextResponse.json({
        success: true,
        marketplaces: {
          fptShop: fptWithINRfptWithINR,
          shopDunk: shopDunkWithINRshopDunkWithINR,
          topZone: topZoneWithINRtopZoneWithINR,
          cellphones: cellphonesWithINRcellphonesWithINR,
        },
        exchangeRate: exchangeRate,
        timestamp: new Date().toISOString(),
        source: "Live Scraping + Wise Exchange Rate",
      });
    }

    if (pathname.includes("/api/health")) {
      return NextResponse.json({
        status: "healthy",
        timestamp: new Date().toISOString(),
      });
    }

    return NextResponse.json({ error: "Endpoint not found" }, { status: 404 });
  } catch (error) {
    console.error("API Error:", error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 },
    );
  }
}

export async function POST(request) {
  return NextResponse.json({ error: "Method not allowed" }, { status: 405 });
}
